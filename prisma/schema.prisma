// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  extensions = [vector]
}

model Document {
  id          String   @id @default(cuid())
  title       String
  content     String
  url         String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  chunks      DocumentChunk[]
  
  @@map("documents")
}

model DocumentChunk {
  id          String                @id @default(cuid())
  documentId  String
  content     String
  chunkIndex  Int
  embedding   Float[] @default([])
  metadata    Json?
  createdAt   DateTime              @default(now())
  
  document    Document              @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@map("document_chunks")
  @@index([documentId])
}

model ChatSession {
  id          String   @id @default(cuid())
  title       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  messages    ChatMessage[]
  
  @@map("chat_sessions")
}

model ChatMessage {
  id          String      @id @default(cuid())
  sessionId   String
  role        MessageRole
  content     String
  metadata    Json?
  createdAt   DateTime    @default(now())
  
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
  @@index([sessionId])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}
