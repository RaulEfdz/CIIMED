// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  extensions = [vector]
}

model Document {
  id          String   @id @default(cuid())
  title       String
  content     String
  url         String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  chunks      DocumentChunk[]
  
  @@map("documents")
}

model DocumentChunk {
  id          String                @id @default(cuid())
  documentId  String
  content     String
  chunkIndex  Int
  embedding   Float[] @default([])
  metadata    Json?
  createdAt   DateTime              @default(now())
  
  document    Document              @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@map("document_chunks")
  @@index([documentId])
}

model ChatSession {
  id          String   @id @default(cuid())
  title       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  messages    ChatMessage[]
  
  @@map("chat_sessions")
}

model ChatMessage {
  id          String      @id @default(cuid())
  sessionId   String
  role        MessageRole
  content     String
  metadata    Json?
  createdAt   DateTime    @default(now())
  
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
  @@index([sessionId])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

model TeamMember {
  id          String   @id @default(cuid())
  name        String
  position    String
  department  String
  email       String?
  phone       String?
  bio         String?
  avatar      String?
  linkedIn    String?
  website     String?
  specialties String[] // Array de especialidades
  status      TeamMemberStatus @default(ACTIVE)
  type        TeamMemberType
  order       Int      @default(0) // Para ordenar en la página
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("team_members")
  @@index([type, order])
  @@index([status])
}

enum TeamMemberStatus {
  ACTIVE
  INACTIVE
}

enum TeamMemberType {
  DIRECTOR     // Directivos
  RESEARCHER   // Investigadores  
  COLLABORATOR // Colaboradores
  STAFF        // Personal administrativo
}

model InstitutionalInfo {
  id           String   @id @default(cuid())
  name         String   // Nombre de la institución
  description  String   // Descripción breve
  subtitle     String?  // Subtítulo para hero section
  mission      String   // Misión
  vision       String   // Visión
  values       String[] // Array de valores
  history      String?  // Historia (opcional)
  address      String?  // Dirección
  phone        String?  // Teléfono
  email        String?  // Email
  website      String?  // Sitio web
  foundingYear Int      // Año de fundación
  logo         String?  // URL del logo
  image        String?  // URL de imagen principal
  
  // Redes sociales
  instagramUrl String?  // URL de Instagram
  linkedinUrl  String?  // URL de LinkedIn
  youtubeUrl   String?  // URL de YouTube
  spotifyUrl   String?  // URL de Spotify
  
  // Características principales
  feature1Title String? // Título característica 1 (ej: "Investigación Avanzada")
  feature1Text  String? // Descripción característica 1
  feature2Title String? // Título característica 2 (ej: "Colaboraciones Estratégicas")
  feature2Text  String? // Descripción característica 2
  
  // Configuración visual
  overlayColor String?  // Color del overlay para hero section
  
  // Configuración del Footer
  footerBrand        String?  // Nombre de la marca en el footer
  footerEmail        String?  // Email de contacto en footer
  footerPhone        String?  // Teléfono de contacto en footer
  footerAddress      String?  // Dirección en footer
  footerCopyright    String?  // Texto de copyright personalizado
  footerBackgroundColor String? // Color de fondo del footer
  footerTextColor    String?  // Color del texto del footer
  footerAccentColor  String?  // Color de acento para links/iconos
  
  status       InstitutionalStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("institutional_info")
}

enum InstitutionalStatus {
  ACTIVE
  INACTIVE
}
